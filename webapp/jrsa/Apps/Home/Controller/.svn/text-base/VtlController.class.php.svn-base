<?php

/* 
 * Jrsn Backup Management System
 * @Description   VTL功能 
 * @version          v1.0
 * @author           Hink<Hink@live.cn>
 * @copyright      (c) 2013 - 9999, Hink, Inc.
 */

namespace Home\Controller;

class VtlController extends CommonController {
    
    function _initialize() {
        parent::_initialize();
    }
    
    public function index(){
        if(IS_POST){
            $sty = I('post.sty');
            if($sty == 1){
                //启动
                @exec("sudo /opt/vtl/bin/vtlstart.sh",$result);
                $this->success(L('success'));
            }elseif($sty == 2){
                //重启
                @exec("sudo /opt/vtl/bin/vtlrestart.sh",$result);
                $this->success(L('success'));
            }else{
                //停止
                @exec("sudo /opt/vtl/bin/vtlstop.sh",$result);
                $this->success(L('success'));
            }
        }
        @exec("sudo /opt/vtl/bin/vtlstatus.sh",$status);
        $vtl = strstr($status[0], 'running') ? 1 : 0;
        $license = _getLicenseData();
        $data['vtlDedupe'] = $license['vtlDedupe'];
        $data['vtlReplicate'] = $license['vtlReplicate'];
        $data['vtlDisk'] = $license['vtlDisk'];
        $this->assign(array(
            'menuid'=>'vtl_index',
            'vtl'=>$vtl,
            'data'=>$data,
        ));
        $this->display();
    }
    
    /**
     * 存储池列表
     */
    public function pool(){
        @exec("sudo /opt/vtl/bin/spconfig -l",$result);
        $type = array('Name','Disks','WORM','Dedupe','Meta','Verify','Export','Replicate','Threshold');
        $this->assign(array(
            'menuid'=>'vtl_pool',
            'pool'=>  $this->_getInfo($result,$type),
        ));
        $this->display();
    }
    
    /*
     * 添加编辑存储池
     */
    public function addPool(){
        $license['vtlDedupe'] = _checkLicense('vtlDedupe', 'trueorfalse');
        $license['vtlReplicate'] = _checkLicense('vtlReplicate', 'trueorfalse');
        if(IS_POST){
            $post = I('post.');
            $type = array('Name','Disks','WORM','Dedupe','Meta','Verify','Export','Replicate','Threshold','oldname');
            foreach ($type as $key){
                if($post[$key]){
                    $data[$key] = $post[$key];
                }else{
                    $data[$key] = 0;
                }
            }
            if($license['vtlDedupe'] && $data['Dedupe']){
                $data['Dedupe'] = '-d ' . $data['Dedupe'];
            }else{
                $data['Dedupe'] = '';
            }
             if($license['vtlReplicate']){
                $data['Replicate'] = '-r ' . $data['Replicate'];
            }else{
                $data['Replicate'] = '';
            }
            if($data['oldname']){//修改
                @exec("sudo /opt/vtl/bin/spconfig -m -g {$data['oldname']} -n {$data['Name']} -v {$data['Verify']} -e {$data['Export']} -r {$data['Replicate']} -t {$data['Threshold']}",$result);
                $this->success(L('success'),U('Vtl/pool'));
            }else{//添加
                @exec("sudo /opt/vtl/bin/spconfig -a -g {$data['Name']} {$data['Dedupe']} -u {$data['Meta']} -v {$data['Verify']} -e {$data['Export']} {$data['Replicate']} -w {$data['WORM']} 2>&1",$result);
                $this->success($this->_floatOutput($result),U('Vtl/pool'));
            }
        }
        $name = I('get.name');
        if($name){
            $info = $this->_getPoolInfo($name);
            $this->assign("data",$info);
        }
        $this->assign(array(
            'menuid'=>'vtl_pool',
            'license'=>$license,
        ));
        $this->display();
    }
    
    public function delPool(){
        if(IS_POST){
            $name = I('post.name');
            if($name){
                @exec("sudo /opt/vtl/bin/spconfig -x -g {$name} 2>&1",$result);
                $this->success($this->_floatOutput($result));
            }
        }
    }
    
    public function bd(){
        @exec("sudo /opt/vtl/bin/bdconfig  -l -c",$result);
        @exec("sudo /opt/vtl/bin/bdconfig  -l -e",$bdconfig);
        $type = array('ID','Vendor','Model','SerialNumber','Name','Pool','Size','Used','Status');
        //pool
        @exec("sudo /opt/vtl/bin/spconfig -l",$pool);
        $typepool = array('Name','Disks','WORM','Dedupe','Meta','Verify','Export','Replicate','Threshold');
        $pool = $this->_getInfo($pool,$typepool);
        
        $data = $this->_getInfo($result,$type);
        $edata = $this->_getInfo($bdconfig,$type);
        $this->assign(array(
            'menuid'=>'vtl_bd',
            'data'=>$data,
            'pool'=>$pool,
            'bdata'=>$edata,
        ));
        $this->display();
    }
    
    /**
     * VTL
     * 加入池和移除池操作
     */
    public function bdAction(){
        if(IS_POST){
            $name = I('post.name');
            $path = I('post.path');
            if($name){//加入池操作
                //授权判断
                @exec("sudo /opt/vtl/bin/bdconfig  -l -c",$result);
                $type = array('ID','Vendor','Model','SerialNumber','Name','Pool','Size','Used','Status');
                $data = $this->_getInfo($result,$type);
                $disk = 0;
                foreach ($data as $item){
                    $disk = $disk + $item['Size'];
                }
                //无授权的时候只对容量做限制
                $licenseInfo = _getLicenseData();
                if(!$licenseInfo){
                    if($disk>400){
                        $this->error("未授权用户，最多只能创建 <font color='red'>400GB</font> 容量");
                    }
                }
                if(!_checkLicense('vtlDisk', $disk)){
                    $this->error(L('verify_license_than'));
                }
                $license['vtlDisk'] = _checkLicense('vtlDisk', 1);
				
				if($name=='Default'){
                	@exec("sudo /opt/vtl/bin/bdconfig -a -d {$path} 2>&1",$result);
                	$this->success($this->_floatOutput($result));
				}
				else{
			    	@exec("sudo /opt/vtl/bin/bdconfig -a -d {$path} -g {$name} 2>&1",$result);
                	$this->success($this->_floatOutput($result));
				}
            }else{//从池中移除
                @exec("sudo /opt/vtl/bin/bdconfig -x -d {$path} 2>&1",$result);
                $this->success($this->_floatOutput($result));
            }
        }
    }
    /**
     * VTL
     */
    public function vt(){
        @exec("sudo /opt/vtl/bin/vtconfig -l",$result);
        $type = array('Name','DevType','Type');
        $data = $this->_getInfo($result,$type);
        $this->assign(array(
            'menuid'=>'vtl_vt',
            'data'=>$data,
        ));
        $this->display();
    }
    
    /*
     * 添加编辑存储池
     */
    public function addVtl(){
        if(IS_POST){
            $data = I('post.');
            @exec("sudo /opt/vtl/bin/vtconfig -a -v {$data['Name']} -t {$data['librarytype']} -s {$data['slots']} -i {$data['ieports']} -d {$data['drivetype0']} -c {$data['ndrives']} 2>&1",$result);
            $this->success($this->_floatOutput($result),U('Vtl/vt'));
        }
        $this->assign(array(
            'menuid'=>'vtl_vt',
        ));
        $this->display();
    }
    
    /**
     * VTL 信息
     * @param type $name
     */
    public function vtlInfo($name=""){
        if($name){
            @exec("sudo /opt/vtl/bin/vtconfig -l -v $name",$result);
            $data = $this->_getVtlInfo($result);
            $data['name'] = $name;
             $this->assign(array(
                'data'=>$data,
            ));
            $this->display();
        }
    }

    /**
     * 删除VTL
     */
    public function delVtl(){
        if(IS_POST){
            $name = I('post.name');
            if($name){
                @exec("sudo /opt/vtl/bin/vtconfig -x -v {$name} 2>&1",$result);
                $this->success($this->_floatOutput($result));
            }
        }
    }
    
     /**
     * 删除Vc
     */
    public function delVc(){
        if(IS_POST){
            $name = I('post.name');
            $label = I('post.label');
            if($name){
                @exec("sudo /opt/vtl/bin/vcconfig -x -v {$name} -p {$label} 2>&1",$result);
                $this->success($this->_floatOutput($result));
            }
        }
    }
    
    /**
     * 添加Vc
     */
    public function addVc(){
        if(IS_POST){
            $post = I('post.');
            @exec("sudo /opt/vtl/bin/vcconfig -a -v {$post['name']} -g {$post['pool']} -p {$post['label']} -t {$post['type']} -c {$post['number']} 2>&1",$result);
            $this->success($this->_floatOutput($result),U('Vtl/vtlInfo',array('name'=>$post['name'])));
        }
        $data['name'] = I('get.name');
        $data['vtype'] = urldecode(I('get.Vtype'));
        //@exec("sudo /opt/vtl/bin/bdconfig  -l -c",$result);
        //$type = array('ID','Vendor','Model','SerialNumber','Name','Pool','Size','Used','Status');
        @exec("sudo /opt/vtl/bin/spconfig -l",$result);
        $type = array('Name','Disks','WORM','Dedupe','Meta','Verify','Export','Replicate','Threshold');
        @exec("sudo /opt/vtl/bin/vcconfig  -h",$retype);
        $ttype = array('Type','Description');
        $pool = $this->_getInfo($result,$type);
        $type = $this->_getInfo($retype,$ttype);
        $this->assign(array(
            'menuid'=>'vtl_vt',
            'pool'=>$pool,
            'data'=>$data,
            'type'=>$type,
        ));
        $this->display();
    }
    
    public function vc(){
        $this->assign(array(
            'menuid'=>'vtl_vc',
        ));
        $this->display();
    }
    
    /**
     * 更新VC中WORM值
     */
    public function updWorm(){
        if(IS_POST){
            $data = I('post.');
            @exec("sudo /opt/vtl/bin/vcconfig -m -v {$data['name']} -p {$data['label']} -w {$data['worm']} 2>&1",$result);
            $this->success($this->_floatOutput($result));
        }
    }
    
    /**
     * 映射
     */
    public function fc(){
        @exec("sudo /opt/vtl/bin/fcconfig -l",$result);
        $type = array('WWPN','Rule','VTL');
        $data = $this->_getInfo($result,$type);
        $this->assign(array(
            'menuid'=>'vtl_fc',
            'data'=>$data,
        ));
        $this->display();
    }
    
    /**
     * 添加Fc
     */
    public function addFc(){
        if(IS_POST){
            $post = I('post.');
            if($post['wwpn'] == 1){
                $post['wwpn'] = '';
            }elseif($post['wwpn'] == 2){
                $post['wwpn'] = '-w' . $post['wwpn2'];
            }else{
                $post['wwpn'] = '-w' . $post['wwpn4'];
            }
            @exec("sudo /opt/vtl/bin/fcconfig -a -v {$post['vtl']} -r {$post['rule']} {$post['wwpn']} 2>&1",$result);
            $this->success($this->_floatOutput($result),U('Vtl/fc'));
        }
        @exec("sudo /opt/vtl/bin/vtconfig -l",$VtlResult);
        $VtlType = array('Name','DevType','Type');
        $vtl = $this->_getInfo($VtlResult,$VtlType);
        $this->assign(array(
            'menuid'=>'vtl_fc',
            'vtl'=>$vtl,
        ));
        $this->display();
    }
    
    /**
     * 删除Fc
     */
    public function delFc(){
        if(IS_POST){
            $vtl = I('post.vtl');
            $rule = I('post.rule');
            $wwpn = I('post.wwpn');
            if($wwpn == 'All'){
                $wwpn = '';
            }  else {
                $wwpn = '-w'.  I('post.wwpn');
            }
            @exec("sudo /opt/vtl/bin/fcconfig -x -v {$vtl} -r {$rule} {$wwpn} 2>&1",$result);
            $this->success($this->_floatOutput($result));
        }
    }
    
    /**
     * 获取所有的Pool信息
     */
    private function _getInfo($input,$source){
        $data= null;
        array_splice($input, 0,1);
        foreach ($input as $key=>$item){
            $tmp = array_values(array_filter(explode(" ", ltrim($item)),"hink_not_filter0"));
            $count = 0;
            $tc = count($tmp);
            $ts = count($source);
            foreach ($source as $k){
                if($ts == $count + 1){
                    for($i = $count;$i<$tc;$i++){
                        $data[$key][$k] .=$tmp[$i] . " ";
                    }
                }else{
                    $data[$key][$k] = $tmp[$count];
                    $count++;
                }
            }
        }
        return $data;
    }
    
    private function _getPoolInfo($name){
        @exec("sudo /opt/vtl/bin/spconfig -l",$result);
        $type = array('Name','Disks','WORM','Dedupe','Meta','Verify','Export','Replicate','Threshold');
        $pool = $this->_getInfo($result,$type);
        foreach ($pool as $key=>$value){
            if($value['Name'] == $name){
                return $pool[$key];
            }
        }
    }
    
    /**
     * 获取VTL 信息
     */
    private function _getVtlInfo($data){
        $result = "";
        $Drive ="";
        $VCartridge = "";
        $data = array_values(array_filter($data,"hink_not_filter0"));
        $vtl = array("Type","Name","Number","Slots","Ports");
        $result['vtl']['Type'] = $tmp[1];
        $vcount =0;
        $dcount = 0;
        $pcount = 0;
        foreach ($data as $k=>$v){
            if(strstr($v, 'VCartridge ')){
                $vcount++;
            }
            if($k<5){
                $pos = stripos($v, ':');
                $result['vtl'][$vtl[$k]] = ltrim(substr($v, $pos+1));
            }elseif($vcount<1){
                if($dcount>0){
                    $Drive[$dcount-1] = $v;
                }
                $dcount++;
            }else{
                if($pcount>0){
                    $VCartridge[$pcount-1] = $v;
                }
                $pcount++;
            }
        }
        /**
         * $VCartridge 解析
         */
        $diy= array('Vtype'=>'4,5,6');
        $VCartridgeItem = array('Pool','Label','Element','Address','Vtype','WORM','Size','Used','Status');
        $VCartridge = $this->_getInfoDiy($VCartridge,$VCartridgeItem,$diy);
        $diy= array('DType'=>'1,2,3');
        $DriveItem = array('Name','DType','Number','VCartridge');
        $Drive = $this->_getInfoDiy($Drive,$DriveItem,$diy);
        $result['VCartridge'] = $VCartridge;
        $result['Drive'] = $Drive;
        return $result;
    }
    
    /**
     * 获取所有的Pool信息
     */
    private function _getInfoDiy($input,$source,$diy){
        $data= null;
        array_splice($input, 0,1);
        foreach ($input as $key=>$item){
            $tmp = array_values(array_filter(explode(" ", ltrim($item)),"hink_not_filter0"));
            $count = 0;
            $tc = count($tmp);
            $ts = count($source);
            foreach ($source as $k){
                if($diy){
                    foreach ($diy as $k1=>$v1){
                        if($k==$k1){
                            $expo = explode(',',$v1);
                            $ntmp = "";
                            foreach ($expo as $v2){
                                $ntmp .= $tmp[$v2] . " ";
                                $count = $v2;
                            }
                            $data[$key][$k] = $ntmp;
                            $count++;
                        }else{
                            $data[$key][$k] = $tmp[$count];
                            $count++;
                        }
                    }
                }else{
                    $data[$key][$k] = $tmp[$count];
                    $count++;
                }
            }
        }
        return $data;
    }
    
    private function _floatOutput($str){
        $result = '';
        if($str){
            foreach ($str as $key){
                $result .= $key.'</br>';
            }
        }
        return $result;
    }
    
    /**
     * license 相关
     */
    
    /**
     * 判断授权是否超出限制
     * @param type $itme
     * @param type $value
     */
    private function checkLicense($itme,$value){
        if(LICENSE == -1 || LICENSE == 0 || LICENSE == 2 || LICENSE == 3){
            return false;
        }elseif(LICENSE == 1){
            return true;
        }else{
            $licenses = $this->license->find();
            $data = $this->getLicenseData();
            if($data[$itme]<0){
                return true;
            }
            if(($data[$itme] + 1)>=$value){
                return true;
            }else{
                return false;
            }
        }
    }
    
    /**
     * 解析License
     * @param type $licenses
     * @return type
     */
    private function getLicenseData(){
        $licenses = $this->license->find();
        return json_decode(Encrypt::authcode($licenses['license'],'DECODE',md5('jrsa')),true);
    }
    
    
}

